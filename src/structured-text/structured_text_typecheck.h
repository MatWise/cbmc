/*******************************************************************\

Module: Structured Text Language Type Checking

Author: Matthias Weiss, matthias.weiss@diffblue.com

\*******************************************************************/

/// \file
/// Structured Text Language Type Checking

#ifndef CPROVER_STRUCTURED_TEXT_STRUCTURED_TEXT_TYPECHECK_H
#define CPROVER_STRUCTURED_TEXT_STRUCTURED_TEXT_TYPECHECK_H

#include <util/symbol_table.h>
#include <util/typecheck.h>

#include "structured_text_parse_tree.h"

/// Create a new structured_text_typecheckt object and perform a type check to
/// fill the symbol table.
/// \param parse_tree: Parse tree generated by parsing a Structured Text file.
/// \param [out] symbol_table: Object that shall be filled by this function.
///   If the symbol table is not empty when calling this function, its contents
///   are merged with the new entries.
/// \param module: Name of the file that has been parsed.
/// \param message_handler: Used to provide debug information and error
///   messages.
/// \return: False if no errors occurred, true otherwise.
bool structured_text_typecheck(
  structured_text_parse_treet &parse_tree,
  symbol_tablet &symbol_table,
  const std::string &module,
  message_handlert &message_handler);

/// Class for encapsulating the current state of the type check.
class structured_text_typecheckt : public typecheckt
{
public:
  structured_text_typecheckt(
    structured_text_parse_treet &parse_tree,
    symbol_tablet &symbol_table,
    const std::string &module,
    message_handlert &message_handler)
    : typecheckt(message_handler),
      parse_tree(parse_tree),
      symbol_table(symbol_table),
      module(module)
  {
  }

  void typecheck() override;
  void
  typecheck_function(const structured_text_parse_treet::functiont &function);
  void typecheck_function_block(
    const structured_text_parse_treet::function_blockt &function_block);

private:
  structured_text_parse_treet &parse_tree;
  // std::vector accumulator;
  symbol_tablet &symbol_table;
  const irep_idt module;

  code_typet::parameterst typecheck_fb_params(
    const structured_text_parse_treet::function_blockt &function_block);
  typet typecheck_structured_text_type(const typet &standard_text_type);
  void typecheck_structured_text_networks(
    const structured_text_parse_treet::networkst &networks);
};

#endif // CPROVER_STRUCTURED_TEXT_STRUCTURED_TEXT_TYPECHECK_H
